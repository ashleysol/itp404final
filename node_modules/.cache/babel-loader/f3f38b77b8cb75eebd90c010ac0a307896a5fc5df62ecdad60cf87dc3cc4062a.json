{"ast":null,"code":"function _fetch(url) {\n  return fetch(url).then(response => {\n    return response.json();\n  });\n}\n// GET x amount of random words\nexport function fetchRandomWords() {\n  return _fetch(\"https://random-word-api.herokuapp.com/word?number=1\");\n}\n// GET translated verson of given word\nexport function fetchTranslatedWords(word) {\n  return _fetch(`https://api.mymemory.translated.net/get?q=${word}!&langpair=en|es`);\n}\n// GET all reviews\nexport function fetchReviews() {\n  return _fetch(\"http://localhost:3000/reviews\");\n}\n// GET all users\nexport function fetchUsers() {\n  return _fetch(\"http://localhost:3000/users\");\n}\n// GET one review\nexport function fetchReview(reviewId) {\n  return _fetch(`http://localhost:3000/reviews/${reviewId}`);\n}\n// POST review to mock API\nexport function saveReview(title, body, name) {\n  return fetch(\"http://localhost:3000/reviews\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      title: title,\n      body: body,\n      userName: name\n    }),\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }).then(response => {\n    return response.json();\n  });\n}\n// PATCH edited review into reviews\nexport function updateReview(reviewId, updatedTitle, updatedBody) {\n  return fetch(`http://localhost:3000/reviews/${reviewId}`, {\n    method: \"PATCH\",\n    body: JSON.stringify({\n      title: updatedTitle,\n      body: updatedBody\n    }),\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }).then(response => {\n    return response.json();\n  });\n}\n//DELETE review\nexport function deleteReview(reviewId) {\n  return fetch(`http://localhost:3000/reviews/${reviewId}`, {\n    method: \"DELETE\"\n  });\n}\n//DELETE user\nexport function deleteUser(userId) {\n  return fetch(`http://localhost:3000/users/${userId}`, {\n    method: \"DELETE\"\n  });\n}","map":{"version":3,"names":["_fetch","url","fetch","then","response","json","fetchRandomWords","fetchTranslatedWords","word","fetchReviews","fetchUsers","fetchReview","reviewId","saveReview","title","body","name","method","JSON","stringify","userName","headers","updateReview","updatedTitle","updatedBody","deleteReview","deleteUser","userId"],"sources":["/Users/ashley/Desktop/frontend-final/src/api.js"],"sourcesContent":["function _fetch(url) {\n  return fetch(url).then((response) => {\n    return response.json();\n  });\n}\n// GET x amount of random words\nexport function fetchRandomWords() {\n  return _fetch(\"https://random-word-api.herokuapp.com/word?number=1\");\n}\n// GET translated verson of given word\nexport function fetchTranslatedWords(word) {\n  return _fetch(\n    `https://api.mymemory.translated.net/get?q=${word}!&langpair=en|es`\n  );\n}\n// GET all reviews\nexport function fetchReviews() {\n  return _fetch(\"http://localhost:3000/reviews\");\n}\n// GET all users\nexport function fetchUsers() {\n  return _fetch(\"http://localhost:3000/users\");\n}\n// GET one review\nexport function fetchReview(reviewId) {\n  return _fetch(`http://localhost:3000/reviews/${reviewId}`);\n}\n// POST review to mock API\nexport function saveReview(title, body, name) {\n  return fetch(\"http://localhost:3000/reviews\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      title: title,\n      body: body,\n      userName: name,\n    }),\n    headers: {\n      \"Content-type\": \"application/json\",\n    },\n  }).then((response) => {\n    return response.json();\n  });\n}\n// PATCH edited review into reviews\nexport function updateReview(reviewId, updatedTitle, updatedBody) {\n  return fetch(`http://localhost:3000/reviews/${reviewId}`, {\n    method: \"PATCH\",\n    body: JSON.stringify({\n      title: updatedTitle,\n      body: updatedBody,\n    }),\n    headers: {\n      \"Content-type\": \"application/json\",\n    },\n  }).then((response) => {\n    return response.json();\n  });\n}\n//DELETE review\nexport function deleteReview(reviewId) {\n  return fetch(`http://localhost:3000/reviews/${reviewId}`, {\n    method: \"DELETE\",\n  });\n}\n//DELETE user\nexport function deleteUser(userId) {\n  return fetch(`http://localhost:3000/users/${userId}`, {\n    method: \"DELETE\",\n  });\n}\n"],"mappings":"AAAA,SAASA,MAAM,CAACC,GAAG,EAAE;EACnB,OAAOC,KAAK,CAACD,GAAG,CAAC,CAACE,IAAI,CAAEC,QAAQ,IAAK;IACnC,OAAOA,QAAQ,CAACC,IAAI,EAAE;EACxB,CAAC,CAAC;AACJ;AACA;AACA,OAAO,SAASC,gBAAgB,GAAG;EACjC,OAAON,MAAM,CAAC,qDAAqD,CAAC;AACtE;AACA;AACA,OAAO,SAASO,oBAAoB,CAACC,IAAI,EAAE;EACzC,OAAOR,MAAM,CACV,6CAA4CQ,IAAK,kBAAiB,CACpE;AACH;AACA;AACA,OAAO,SAASC,YAAY,GAAG;EAC7B,OAAOT,MAAM,CAAC,+BAA+B,CAAC;AAChD;AACA;AACA,OAAO,SAASU,UAAU,GAAG;EAC3B,OAAOV,MAAM,CAAC,6BAA6B,CAAC;AAC9C;AACA;AACA,OAAO,SAASW,WAAW,CAACC,QAAQ,EAAE;EACpC,OAAOZ,MAAM,CAAE,iCAAgCY,QAAS,EAAC,CAAC;AAC5D;AACA;AACA,OAAO,SAASC,UAAU,CAACC,KAAK,EAAEC,IAAI,EAAEC,IAAI,EAAE;EAC5C,OAAOd,KAAK,CAAC,+BAA+B,EAAE;IAC5Ce,MAAM,EAAE,MAAM;IACdF,IAAI,EAAEG,IAAI,CAACC,SAAS,CAAC;MACnBL,KAAK,EAAEA,KAAK;MACZC,IAAI,EAAEA,IAAI;MACVK,QAAQ,EAAEJ;IACZ,CAAC,CAAC;IACFK,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC,CAAClB,IAAI,CAAEC,QAAQ,IAAK;IACpB,OAAOA,QAAQ,CAACC,IAAI,EAAE;EACxB,CAAC,CAAC;AACJ;AACA;AACA,OAAO,SAASiB,YAAY,CAACV,QAAQ,EAAEW,YAAY,EAAEC,WAAW,EAAE;EAChE,OAAOtB,KAAK,CAAE,iCAAgCU,QAAS,EAAC,EAAE;IACxDK,MAAM,EAAE,OAAO;IACfF,IAAI,EAAEG,IAAI,CAACC,SAAS,CAAC;MACnBL,KAAK,EAAES,YAAY;MACnBR,IAAI,EAAES;IACR,CAAC,CAAC;IACFH,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC,CAAClB,IAAI,CAAEC,QAAQ,IAAK;IACpB,OAAOA,QAAQ,CAACC,IAAI,EAAE;EACxB,CAAC,CAAC;AACJ;AACA;AACA,OAAO,SAASoB,YAAY,CAACb,QAAQ,EAAE;EACrC,OAAOV,KAAK,CAAE,iCAAgCU,QAAS,EAAC,EAAE;IACxDK,MAAM,EAAE;EACV,CAAC,CAAC;AACJ;AACA;AACA,OAAO,SAASS,UAAU,CAACC,MAAM,EAAE;EACjC,OAAOzB,KAAK,CAAE,+BAA8ByB,MAAO,EAAC,EAAE;IACpDV,MAAM,EAAE;EACV,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}